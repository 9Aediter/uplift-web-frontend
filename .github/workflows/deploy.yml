name: Deploy Frontend Uplifttech.store

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build, Push to ECR & Deploy to EC2
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build --build-arg NEXT_PUBLIC_NOTION_TOKEN=${{ vars.NEXT_PUBLIC_NOTION_TOKEN }} --build-arg NEXT_PUBLIC_NOTION_DATABASE_ID=${{ vars.NEXT_PUBLIC_NOTION_DATABASE_ID }} --build-arg NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ vars.NEXT_PUBLIC_GA_MEASUREMENT_ID }} --build-arg NEXT_PUBLIC_STRAPI_API_URL=${{ vars.NEXT_PUBLIC_STRAPI_API_URL }} -t ${{ vars.ECR_REPOSITORY }}:latest .

      - name: Tag image for ECR
        run: |
          docker tag ${{ vars.ECR_REPOSITORY }}:latest ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest

      - name: Push image to ECR
        run: |
          docker push ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest

      - name: SSH EC2 and login to ECR
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "âœ… Logging in to Amazon ECR..."
            aws ecr get-login-password --region ap-southeast-1 \
              | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}

      - name: SSH into EC2 and deploy container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest
            docker stop frontend || true
            docker rm frontend || true
            docker network create uplifttech || true

            docker run -d \
              --name frontend \
              --network uplifttech \
              -p 3000:3000 \
              -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              -e NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_BUCKET="${{ secrets.AWS_BUCKET }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e CDN_URL="${{ secrets.CDN_URL }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest

            docker image prune -a -f
