name: üöÄ Uplift Web Frontend CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  AWS_REGION: "ap-southeast-1"
  ECR_REPOSITORY: "uplift-web-frontend"

permissions:
  id-token: write
  contents: read

jobs:
  quality-gate:
    name: üîç Quality Gate
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üöÄ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install Dependencies
        run: npm ci --no-audit --prefer-offline

      - name: üîç Lint Code
        run: npm run lint

      - name: üîß Type Check
        run: npx tsc --noEmit

      - name: üèóÔ∏è Build Next.js
        run: npm run build

      - name: üõ°Ô∏è Security Audit
        run: npm audit --audit-level=high
        continue-on-error: true

  docker-build:
    name: üê≥ Build & Push to ECR
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    outputs:
      image-tag: ${{ steps.pick.outputs.image_tag }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîê Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-uplift-frontend
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üè∑Ô∏è Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=sha,format=short
            type=raw,value=latest

      - name: üèóÔ∏è Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ vars.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üìå Pick single image tag
        id: pick
        run: |
          first_tag="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          tag_only="${first_tag##*:}"
          echo "image_tag=${tag_only}" >> "$GITHUB_OUTPUT"
          echo "Using image tag: ${tag_only}"

  update-gitops:
    name: üîÑ Update GitOps Repository
    runs-on: ubuntu-latest
    needs: [quality-gate, docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: üì• Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: üîÑ Update Image Tag
        run: |
          cd gitops

          # Update the image tag in the deployment manifest
          MANIFEST_PATH="manifests/uplift/uplift-web-frontend/deployment.yaml"

          if [ -f "$MANIFEST_PATH" ]; then
              # Use sed to replace the image tag
              sed -i "s|image: .*${{ env.ECR_REPOSITORY }}.*|image: ${{ vars.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.docker-build.outputs.image-tag }}|g" "$MANIFEST_PATH"

              echo "Updated image tag in $MANIFEST_PATH to ${{ needs.docker-build.outputs.image-tag }}"
              cat "$MANIFEST_PATH"
          else
              echo "‚ö†Ô∏è Deployment manifest not found at $MANIFEST_PATH"
              echo "Available files:"
              find . -name "*.yaml" -o -name "*.yml" | head -20
          fi

      - name: üìù Commit and Push Changes
        run: |
          cd gitops
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add -A

          if git diff --staged --quiet; then
              echo "No changes to commit"
          else
              git commit -m "üöÄ Update uplift-web-frontend image to ${{ needs.docker-build.outputs.image-tag }}

              Deployed from commit: ${{ github.sha }}
              Workflow: ${{ github.workflow }}
              Run: ${{ github.run_number }}"

              git push origin main
              echo "‚úÖ Successfully updated GitOps repository"
          fi

  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: [update-gitops]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: ‚è≥ Wait for ArgoCD Sync
        run: |
          echo "‚è≥ Waiting for ArgoCD to sync changes..."
          sleep 60

      - name: üè• Check Application Health
        run: |
          max_attempts=12
          attempt=1

          echo "üîç Starting health check for ${{ vars.PRODUCTION_URL }}"

          while [ $attempt -le $max_attempts ]; do
            echo "üîÑ Health check attempt $attempt/$max_attempts"

            if curl -f -s "${{ vars.PRODUCTION_URL }}/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              curl -s "${{ vars.PRODUCTION_URL }}/api/health" || echo "API health endpoint responded successfully"
              exit 0
            elif curl -f -s "${{ vars.PRODUCTION_URL }}" > /dev/null 2>&1; then
              echo "‚úÖ Main page is accessible!"
              exit 0
            fi

            echo "‚è≥ Attempt $attempt/$max_attempts failed, retrying in 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          done

          echo "‚ùå Health check failed after $max_attempts attempts"
          echo "üîç Attempting to get more information..."

          # Try to get response code and headers for debugging
          curl -I "${{ vars.PRODUCTION_URL }}" || true
          curl -I "${{ vars.PRODUCTION_URL }}/api/health" || true

          exit 1